// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(DbAppContext))]
    [Migration("20231011132103_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Entities.Cita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdCita")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("FechaCita")
                        .IsRequired()
                        .HasColumnType("DateTime")
                        .HasColumnName("FechaCita");

                    b.Property<int>("MascotaId")
                        .HasColumnType("int")
                        .HasColumnName("Mascota_Id");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("MotivoCita");

                    b.Property<int>("VeterinarioId")
                        .HasColumnType("int")
                        .HasColumnName("Veterinario_Id");

                    b.HasKey("Id");

                    b.HasIndex("MascotaId");

                    b.HasIndex("VeterinarioId");

                    b.ToTable("Cita", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FechaCita = new DateTime(2024, 1, 24, 5, 35, 0, 0, DateTimeKind.Unspecified),
                            MascotaId = 1,
                            Motivo = "Lo atropello un carro",
                            VeterinarioId = 1
                        },
                        new
                        {
                            Id = 2,
                            FechaCita = new DateTime(2024, 1, 24, 14, 35, 0, 0, DateTimeKind.Unspecified),
                            MascotaId = 2,
                            Motivo = "Le sale mucho moco por la nariz",
                            VeterinarioId = 1
                        },
                        new
                        {
                            Id = 3,
                            FechaCita = new DateTime(2024, 5, 7, 20, 15, 0, 0, DateTimeKind.Unspecified),
                            MascotaId = 3,
                            Motivo = "Extraño bulto en el costado del abdomen",
                            VeterinarioId = 2
                        });
                });

            modelBuilder.Entity("Core.Entities.DetalleMovimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdDetalleMovimiento")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cantidad")
                        .HasColumnType("int")
                        .HasColumnName("Cantidad");

                    b.Property<int>("MovimientoMedicamentoId")
                        .HasColumnType("int")
                        .HasColumnName("MovimientoMedicamento_Id");

                    b.Property<string>("PrecioTotal")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("PrecioTotal");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("Producto_Id");

                    b.Property<int>("TipoMovimientoId")
                        .HasColumnType("int")
                        .HasColumnName("TipoMovimiento_Id");

                    b.HasKey("Id");

                    b.HasIndex("MovimientoMedicamentoId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("TipoMovimientoId");

                    b.ToTable("DetalleMovimiento", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cantidad = 6,
                            MovimientoMedicamentoId = 1,
                            PrecioTotal = "60000",
                            ProductoId = 1,
                            TipoMovimientoId = 1
                        },
                        new
                        {
                            Id = 2,
                            Cantidad = 2,
                            MovimientoMedicamentoId = 2,
                            PrecioTotal = "10000",
                            ProductoId = 2,
                            TipoMovimientoId = 2
                        },
                        new
                        {
                            Id = 3,
                            Cantidad = 10,
                            MovimientoMedicamentoId = 3,
                            PrecioTotal = "100000",
                            ProductoId = 3,
                            TipoMovimientoId = 2
                        });
                });

            modelBuilder.Entity("Core.Entities.Especie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdEspecie")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Especie", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "felina"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Perro"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Hamster"
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "Conejo"
                        },
                        new
                        {
                            Id = 5,
                            Nombre = "Serpiente"
                        });
                });

            modelBuilder.Entity("Core.Entities.Laboratorio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdLaboratorio")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Direccion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("Nombre");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Telefono");

                    b.HasKey("Id");

                    b.ToTable("Laboratorio", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Direccion = "Cl 58 #8-41, Bucaramanga, Girón, Bucaramanga, Santander",
                            Nombre = "Genfar",
                            Telefono = "3145674323"
                        },
                        new
                        {
                            Id = 2,
                            Direccion = "Cl. 158, Floridablanca, Santander",
                            Nombre = "Laboratorio clínico Higuera Escalante",
                            Telefono = "3165374321"
                        },
                        new
                        {
                            Id = 3,
                            Direccion = "Cra. 24 #154 - 106, Floridablanca, Santander",
                            Nombre = "Megalab Laboratorio",
                            Telefono = "3209894353"
                        });
                });

            modelBuilder.Entity("Core.Entities.Mascota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdMascota")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EspecieId")
                        .HasColumnType("int")
                        .HasColumnName("Especie_Id");

                    b.Property<DateTime?>("FechaNacimiento")
                        .IsRequired()
                        .HasColumnType("DateTime")
                        .HasColumnName("FechaNacimiento");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar")
                        .HasColumnName("Nombre");

                    b.Property<int>("PropietarioId")
                        .HasColumnType("int")
                        .HasColumnName("Propietario_Id");

                    b.Property<int>("RazaId")
                        .HasColumnType("int")
                        .HasColumnName("Raza_Id");

                    b.HasKey("Id");

                    b.HasIndex("EspecieId");

                    b.HasIndex("PropietarioId");

                    b.HasIndex("RazaId");

                    b.ToTable("Mascota", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EspecieId = 1,
                            FechaNacimiento = new DateTime(2024, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Pepinill0",
                            PropietarioId = 1,
                            RazaId = 1
                        },
                        new
                        {
                            Id = 2,
                            EspecieId = 3,
                            FechaNacimiento = new DateTime(2024, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Sparkles",
                            PropietarioId = 2,
                            RazaId = 2
                        },
                        new
                        {
                            Id = 3,
                            EspecieId = 4,
                            FechaNacimiento = new DateTime(2024, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Brillitos",
                            PropietarioId = 3,
                            RazaId = 3
                        });
                });

            modelBuilder.Entity("Core.Entities.Medicamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdMedicamento")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CantidadDisponible")
                        .HasColumnType("int")
                        .HasColumnName("CantidadDisponible");

                    b.Property<int>("LaboratorioId")
                        .HasColumnType("int")
                        .HasColumnName("Laboratorio_Id");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("Nombre");

                    b.Property<string>("PrecioUnidad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("PrecioUnidad");

                    b.HasKey("Id");

                    b.HasIndex("LaboratorioId");

                    b.ToTable("Medicamento", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CantidadDisponible = 100,
                            LaboratorioId = 1,
                            Nombre = "Aspirina",
                            PrecioUnidad = "5000"
                        },
                        new
                        {
                            Id = 2,
                            CantidadDisponible = 250,
                            LaboratorioId = 2,
                            Nombre = "Paracetamol",
                            PrecioUnidad = "1000"
                        },
                        new
                        {
                            Id = 3,
                            CantidadDisponible = 30,
                            LaboratorioId = 3,
                            Nombre = "Omeprazol",
                            PrecioUnidad = "10000"
                        });
                });

            modelBuilder.Entity("Core.Entities.MedicamentosProveedores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdMedicamentosProveedores")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MedicamentoId")
                        .HasColumnType("int")
                        .HasColumnName("Medicamento_Id");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("int")
                        .HasColumnName("Proveedor_Id");

                    b.HasKey("Id");

                    b.HasIndex("MedicamentoId");

                    b.HasIndex("ProveedorId");

                    b.ToTable("MedicamentosProveedores", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MedicamentoId = 1,
                            ProveedorId = 1
                        },
                        new
                        {
                            Id = 2,
                            MedicamentoId = 2,
                            ProveedorId = 2
                        },
                        new
                        {
                            Id = 3,
                            MedicamentoId = 3,
                            ProveedorId = 3
                        });
                });

            modelBuilder.Entity("Core.Entities.MovimientoMedicamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdMovimientoMedicamento")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cantidad")
                        .HasColumnType("int")
                        .HasColumnName("Cantidad");

                    b.Property<DateTime?>("FechaMovimiento")
                        .IsRequired()
                        .HasColumnType("DateTime")
                        .HasColumnName("FechaMovimiento");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("Producto_Id");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.ToTable("MovimientoMedicamento", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cantidad = 20,
                            FechaMovimiento = new DateTime(2023, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductoId = 1
                        },
                        new
                        {
                            Id = 2,
                            Cantidad = 50,
                            FechaMovimiento = new DateTime(2024, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductoId = 3
                        },
                        new
                        {
                            Id = 3,
                            Cantidad = 10,
                            FechaMovimiento = new DateTime(2024, 8, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductoId = 2
                        });
                });

            modelBuilder.Entity("Core.Entities.Propietario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdPropietario")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Email");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("NombreCompleto");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Telefono");

                    b.HasKey("Id");

                    b.ToTable("Propietario", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "JuanOrdoñez@gmail.com",
                            NombreCompleto = "Juan Andres Lisarazo Ordoñez",
                            Telefono = "3224546545"
                        },
                        new
                        {
                            Id = 2,
                            Email = "PepitoSalamez@gmail.com",
                            NombreCompleto = "Pepito Perez Salamez",
                            Telefono = "3012312312"
                        },
                        new
                        {
                            Id = 3,
                            Email = "britodelgado514@gmail.com",
                            NombreCompleto = "Sicer Andres Brito Gutierrez",
                            Telefono = "3208818203"
                        });
                });

            modelBuilder.Entity("Core.Entities.Proveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdProveedor")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Email");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("NombreCompleto");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Telefono");

                    b.HasKey("Id");

                    b.ToTable("Proveedor", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Direccion = "Calle José Ortega y Gasset, 40 - loc.",
                            NombreCompleto = "Pablo Antonio Gimenes Ortega",
                            Telefono = "3224546545"
                        },
                        new
                        {
                            Id = 2,
                            Direccion = "Calle Vitoshko Lale 16, 1618.",
                            NombreCompleto = "Juanita Perez Ordoñez",
                            Telefono = "3012312312"
                        },
                        new
                        {
                            Id = 3,
                            Direccion = "Calle Serrano Galvache, 56.",
                            NombreCompleto = "Konny Liseth Alucema Torres",
                            Telefono = "3208818203"
                        });
                });

            modelBuilder.Entity("Core.Entities.Raza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdRaza")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EspecieId")
                        .HasColumnType("int")
                        .HasColumnName("Especie_Id");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.HasIndex("EspecieId");

                    b.ToTable("Raza", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EspecieId = 1,
                            Nombre = "Mamiferos"
                        },
                        new
                        {
                            Id = 2,
                            EspecieId = 2,
                            Nombre = "Aves"
                        },
                        new
                        {
                            Id = 3,
                            EspecieId = 3,
                            Nombre = "Reptiles"
                        });
                });

            modelBuilder.Entity("Core.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdRol")
                        .HasAnnotation("MySqlValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("NombreRol");

                    b.HasKey("Id");

                    b.ToTable("Rol", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Administrador"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Gerente"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Empleado"
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "Persona"
                        });
                });

            modelBuilder.Entity("Core.Entities.TipoMovimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdTipoMovimiento")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Descripcion");

                    b.HasKey("Id");

                    b.ToTable("TipoMovimiento", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Recepcion"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Envio"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Preparacion de pedidos"
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "Intercambio de muelles"
                        });
                });

            modelBuilder.Entity("Core.Entities.TratamientoMedico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdTratamientoMedico")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CantidadDias")
                        .HasColumnType("int")
                        .HasColumnName("CantidadDias");

                    b.Property<int>("CantidadDosis")
                        .HasColumnType("int")
                        .HasColumnName("CantidadDosis");

                    b.Property<int>("CitaId")
                        .HasColumnType("int")
                        .HasColumnName("Cita_Id");

                    b.Property<DateTime?>("FechaAdministracion")
                        .IsRequired()
                        .HasColumnType("DateTime")
                        .HasColumnName("FechaAdministracion");

                    b.Property<int>("MedicamentoId")
                        .HasColumnType("int")
                        .HasColumnName("Medicamento_Id");

                    b.Property<string>("Observacion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Observacion");

                    b.HasKey("Id");

                    b.HasIndex("CitaId");

                    b.HasIndex("MedicamentoId");

                    b.ToTable("TratamientoMedico", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CantidadDias = 30,
                            CantidadDosis = 800,
                            CitaId = 1,
                            FechaAdministracion = new DateTime(2023, 4, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicamentoId = 1,
                            Observacion = ""
                        },
                        new
                        {
                            Id = 2,
                            CantidadDias = 15,
                            CantidadDosis = 1200,
                            CitaId = 2,
                            FechaAdministracion = new DateTime(2023, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicamentoId = 2,
                            Observacion = ""
                        },
                        new
                        {
                            Id = 3,
                            CantidadDias = 7,
                            CantidadDosis = 500,
                            CitaId = 3,
                            FechaAdministracion = new DateTime(2023, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicamentoId = 3,
                            Observacion = ""
                        },
                        new
                        {
                            Id = 4,
                            CantidadDias = 21,
                            CantidadDosis = 150,
                            CitaId = 3,
                            FechaAdministracion = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicamentoId = 1,
                            Observacion = ""
                        });
                });

            modelBuilder.Entity("Core.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Usuario")
                        .HasAnnotation("MySqlValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("Email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("Password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Usuario", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "britodelgado514@gmail.com",
                            Password = "1234",
                            Username = "Sicer Brito"
                        },
                        new
                        {
                            Id = 2,
                            Email = "angedeveloper@gmail.com",
                            Password = "12345",
                            Username = "Angelica Morales"
                        },
                        new
                        {
                            Id = 3,
                            Email = "lisethtorres969@gmail.com",
                            Password = "123456",
                            Username = "Konny Alucemna"
                        });
                });

            modelBuilder.Entity("Core.Entities.UsuarioRoles", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UsuarioId", "RolId");

                    b.HasIndex("RolId");

                    b.ToTable("UsuariosRoles");
                });

            modelBuilder.Entity("Core.Entities.Veterinario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdVeterinario")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("Email");

                    b.Property<string>("Especialidad")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar")
                        .HasColumnName("Especialidad");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("NombreCompleto");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Telefono");

                    b.HasKey("Id");

                    b.ToTable("Veterinario", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "EduardoCarrasquilla@gmail.com",
                            Especialidad = "Cirujano",
                            NombreCompleto = "Juan Eduardo Carrasquilla",
                            Telefono = "3203453432"
                        },
                        new
                        {
                            Id = 2,
                            Email = "JuanAriza@gmail.com",
                            Especialidad = "Rehabilitacion",
                            NombreCompleto = "Juan Jesus Gutierrez Ariza",
                            Telefono = "3167194381"
                        },
                        new
                        {
                            Id = 3,
                            Email = "angelicamorales@gmail.com",
                            Especialidad = "Fisioterapia",
                            NombreCompleto = "Maria Angrelica Morales Silva",
                            Telefono = "3013238789"
                        },
                        new
                        {
                            Id = 4,
                            Email = "PepitoGiral@gmail.com",
                            Especialidad = "Oncologia",
                            NombreCompleto = "Pepito Pelas Giral",
                            Telefono = "3228878976"
                        });
                });

            modelBuilder.Entity("Core.Entities.Cita", b =>
                {
                    b.HasOne("Core.Entities.Mascota", "Mascotas")
                        .WithMany("Citas")
                        .HasForeignKey("MascotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Veterinario", "Veterinarios")
                        .WithMany("Citas")
                        .HasForeignKey("VeterinarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mascotas");

                    b.Navigation("Veterinarios");
                });

            modelBuilder.Entity("Core.Entities.DetalleMovimiento", b =>
                {
                    b.HasOne("Core.Entities.MovimientoMedicamento", "MovimientoMedicamentos")
                        .WithMany("DetalleMovimientos")
                        .HasForeignKey("MovimientoMedicamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Medicamento", "Medicamentos")
                        .WithMany("DetalleMovimientos")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TipoMovimiento", "TipoMovimientos")
                        .WithMany("DetalleMovimientos")
                        .HasForeignKey("TipoMovimientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicamentos");

                    b.Navigation("MovimientoMedicamentos");

                    b.Navigation("TipoMovimientos");
                });

            modelBuilder.Entity("Core.Entities.Mascota", b =>
                {
                    b.HasOne("Core.Entities.Especie", "Especies")
                        .WithMany("Mascotas")
                        .HasForeignKey("EspecieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Propietario", "Propietarios")
                        .WithMany("Mascotas")
                        .HasForeignKey("PropietarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Raza", "Razas")
                        .WithMany("Mascotas")
                        .HasForeignKey("RazaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especies");

                    b.Navigation("Propietarios");

                    b.Navigation("Razas");
                });

            modelBuilder.Entity("Core.Entities.Medicamento", b =>
                {
                    b.HasOne("Core.Entities.Laboratorio", "Laboratorios")
                        .WithMany("Medicamentos")
                        .HasForeignKey("LaboratorioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Laboratorios");
                });

            modelBuilder.Entity("Core.Entities.MedicamentosProveedores", b =>
                {
                    b.HasOne("Core.Entities.Medicamento", "Medicamentos")
                        .WithMany("MedicamentosProveedores")
                        .HasForeignKey("MedicamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Proveedor", "Proveedores")
                        .WithMany("MedicamentosProveedores")
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicamentos");

                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("Core.Entities.MovimientoMedicamento", b =>
                {
                    b.HasOne("Core.Entities.Medicamento", "Medicamentos")
                        .WithMany("MovimientoMedicamentos")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicamentos");
                });

            modelBuilder.Entity("Core.Entities.Raza", b =>
                {
                    b.HasOne("Core.Entities.Especie", "Especies")
                        .WithMany("Razas")
                        .HasForeignKey("EspecieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especies");
                });

            modelBuilder.Entity("Core.Entities.RefreshToken", b =>
                {
                    b.HasOne("Core.Entities.Usuario", "Usuario")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Core.Entities.TratamientoMedico", b =>
                {
                    b.HasOne("Core.Entities.Cita", "Citas")
                        .WithMany("TratamientoMedicos")
                        .HasForeignKey("CitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Medicamento", "Medicamentos")
                        .WithMany("TratamientoMedicos")
                        .HasForeignKey("MedicamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Citas");

                    b.Navigation("Medicamentos");
                });

            modelBuilder.Entity("Core.Entities.UsuarioRoles", b =>
                {
                    b.HasOne("Core.Entities.Rol", "Roles")
                        .WithMany("UsuarioRoles")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Usuario", "Usuarios")
                        .WithMany("UsuarioRoles")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Core.Entities.Cita", b =>
                {
                    b.Navigation("TratamientoMedicos");
                });

            modelBuilder.Entity("Core.Entities.Especie", b =>
                {
                    b.Navigation("Mascotas");

                    b.Navigation("Razas");
                });

            modelBuilder.Entity("Core.Entities.Laboratorio", b =>
                {
                    b.Navigation("Medicamentos");
                });

            modelBuilder.Entity("Core.Entities.Mascota", b =>
                {
                    b.Navigation("Citas");
                });

            modelBuilder.Entity("Core.Entities.Medicamento", b =>
                {
                    b.Navigation("DetalleMovimientos");

                    b.Navigation("MedicamentosProveedores");

                    b.Navigation("MovimientoMedicamentos");

                    b.Navigation("TratamientoMedicos");
                });

            modelBuilder.Entity("Core.Entities.MovimientoMedicamento", b =>
                {
                    b.Navigation("DetalleMovimientos");
                });

            modelBuilder.Entity("Core.Entities.Propietario", b =>
                {
                    b.Navigation("Mascotas");
                });

            modelBuilder.Entity("Core.Entities.Proveedor", b =>
                {
                    b.Navigation("MedicamentosProveedores");
                });

            modelBuilder.Entity("Core.Entities.Raza", b =>
                {
                    b.Navigation("Mascotas");
                });

            modelBuilder.Entity("Core.Entities.Rol", b =>
                {
                    b.Navigation("UsuarioRoles");
                });

            modelBuilder.Entity("Core.Entities.TipoMovimiento", b =>
                {
                    b.Navigation("DetalleMovimientos");
                });

            modelBuilder.Entity("Core.Entities.Usuario", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UsuarioRoles");
                });

            modelBuilder.Entity("Core.Entities.Veterinario", b =>
                {
                    b.Navigation("Citas");
                });
#pragma warning restore 612, 618
        }
    }
}
